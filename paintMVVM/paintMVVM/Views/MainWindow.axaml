<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:paintMVVM.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="paintMVVM.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/avalonia-logo.ico"
        Title="paintMVVM">

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>

	<DockPanel>
		<StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
			<Button Command="{Binding PencilButtonCommand}">Pencil</Button>
			<Button Command="{Binding LineButtonCommand}">Line</Button>
			<ColorPicker Color="{Binding CurrentColor}"></ColorPicker>
			<StackPanel>
				<TextBlock Text="{Binding #Slider.Value}" HorizontalAlignment="Center"/>
				<Slider x:Name="Slider" Width="100" Minimum="2" Maximum="100" Value="{Binding CurrentThickness}" TickFrequency="1" IsSnapToTickEnabled="True"/>
			</StackPanel>
			<Button Command="{Binding ClearButtonCommand}">Clear</Button>
		</StackPanel>
		<Border BorderBrush="Black" BorderThickness="1" Margin="5">
			<Canvas x:Name="DrawingCanvas" Background="White">
				<Interaction.Behaviors>
					<EventTriggerBehavior EventName="PointerPressed">
						<InvokeCommandAction Command="{Binding PointerPressedCommand}" PassEventArgsToCommand="True"></InvokeCommandAction>
					</EventTriggerBehavior>
					<EventTriggerBehavior EventName="PointerMoved">
						<InvokeCommandAction Command="{Binding PointerMovedCommand}" PassEventArgsToCommand="True"></InvokeCommandAction>
					</EventTriggerBehavior>
					<EventTriggerBehavior EventName="PointerReleased">
						<InvokeCommandAction Command="{Binding PointerReleasedCommand}" PassEventArgsToCommand="True"></InvokeCommandAction>
					</EventTriggerBehavior>
					<EventTriggerBehavior EventName="PointerExited">
						<InvokeCommandAction Command="{Binding PointerLeaveCommand}" PassEventArgsToCommand="True"></InvokeCommandAction>
					</EventTriggerBehavior>
				</Interaction.Behaviors>
			</Canvas>        
		</Border>
	</DockPanel>

</Window>
